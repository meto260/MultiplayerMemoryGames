@page "/game/{channelName}"
@using Blazored.LocalStorage
@inject NavigationManager NavigationManager
@inject PlayerService PlayerService
@inject ILocalStorageService LocalStorageService
@implements IDisposable
@layout MainLayout

<link href="/css/site.css" rel="stylesheet" />
@if (!gameStarted)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="form-group myform">
                    <label for="roomname">Room Name:</label>
                    <input type="text" class="form-control" id="roomname" @bind="roomname" />
                    <label for="nickname">NickName:</label>
                    <input type="text" class="form-control" id="nickname" @bind="nickname" />
                    <br />
                    <button class="formButton" @onclick="StartGame">Start Game</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div style="display: flex;">
        <div class="game-board" style="grid-template-columns: repeat(@horizontalCardCount, 80px); grid-template-rows: repeat(@verticalCardCount, 80px);">
            @foreach (var card in cards)
            {
                <div class="card @(card.Flipped ? "flipped" : "")" @onclick="() => FlipCard(card.Id)">
                    @if (card.Flipped)
                    {
                        <svg viewBox="0 0 100 100">
                            @switch (card.Shape)
                            {
                                case "circle":
                                    <circle cx="50" cy="50" r="40" fill="blue" />
                                    break;
                                case "square":
                                    <rect x="10" y="10" width="80" height="80" fill="red" />
                                    break;
                                case "triangle":
                                    <polygon points="50,10 90,90 10,90" fill="green" />
                                    break;
                                case "star":
                                    <polygon points="50,10 63,37 90,43 70,65 75,90 50,77 25,90 30,65 10,43 37,37" fill="yellow" />
                                    break;
                                case "heart":
                                    <path d="M50,10 A30,30 0 0,1 90,50 L50,90 A30,30 0 0,1 10,50 Z" fill="purple" />
                                    break;
                                case "diamond":
                                    <polygon points="50,10 90,50 50,90 10,50" fill="orange" />
                                    break;
                                case "cross":
                                    <path d="M20,20 L80,80 M80,20 L20,80" stroke="black" stroke-width="10" />
                                    break;
                                case "moon":
                                    <path d="M50,10 A40,40 0 1,0 50,90 A40,40 0 1,0 50,10 Z" fill="gray" />
                                    break;
                                case "pentagon":
                                    <polygon points="50,10 90,40 80,90 20,90 10,40" fill="teal" />
                                    break;
                                case "hexagon":
                                    <polygon points="50,10 90,30 90,70 50,90 10,70 10,30" fill="brown" />
                                    break;
                                case "octagon":
                                    <polygon points="30,10 70,10 90,30 90,70 70,90 30,90 10,70 10,30" fill="pink" />
                                    break;
                                case "club":
                                    <path d="M50,20 A20,20 0 1,0 30,50 A20,20 0 1,0 70,50 A20,20 0 1,0 50,20 L50,90" fill="black" />
                                    break;
                                case "spade":
                                    <path d="M50,10 L90,50 A40,40 0 1,1 10,50 L50,10 L50,90" fill="black" />
                                    break;
                                case "trapezoid":
                                    <polygon points="20,20 80,20 90,80 10,80" fill="violet" />
                                    break;
                                case "parallelogram":
                                    <polygon points="20,20 80,20 60,80 0,80" fill="cyan" />
                                    break;
                                case "rhombus":
                                    <polygon points="50,10 90,50 50,90 10,50" fill="magenta" />
                                    break;
                                case "arrow-up":
                                    <polygon points="50,10 80,50 60,50 60,90 40,90 40,50 20,50" fill="darkgreen" />
                                    break;
                                case "arrow-down":
                                    <polygon points="50,90 80,50 60,50 60,10 40,10 40,50 20,50" fill="darkblue" />
                                    break;
                                case "arrow-left":
                                    <polygon points="10,50 50,20 50,40 90,40 90,60 50,60 50,80" fill="darkred" />
                                    break;
                                case "arrow-right":
                                    <polygon points="90,50 50,20 50,40 10,40 10,60 50,60 50,80" fill="darkorange" />
                                    break;
                                case "plus":
                                    <path d="M40,20 L60,20 L60,40 L80,40 L80,60 L60,60 L60,80 L40,80 L40,60 L20,60 L20,40 L40,40 Z" fill="indigo" />
                                    break;
                                case "minus":
                                    <rect x="20" y="40" width="60" height="20" fill="crimson" />
                                    break;
                                case "multiply":
                                    <path d="M20,20 L80,80 M80,20 L20,80" stroke="navy" stroke-width="10" />
                                    break;
                                case "divide":
                                    <g fill="maroon">
                                        <circle cx="50" cy="25" r="10" />
                                        <rect x="20" y="45" width="60" height="10" />
                                        <circle cx="50" cy="75" r="10" />
                                    </g>
                                    break;
                                case "sun":
                                    <g fill="gold">
                                        <circle cx="50" cy="50" r="25" />
                                        <path d="M50,10 L50,30 M50,70 L50,90 M10,50 L30,50 M70,50 L90,50" stroke="gold" stroke-width="8" />
                                    </g>
                                    break;
                                case "cloud":
                                    <path d="M20,50 A20,20 0 0,1 40,30 A20,20 0 0,1 60,30 A20,20 0 0,1 80,50 A20,20 0 0,1 60,70 L40,70 A20,20 0,0,1 20,50" fill="lightblue" />
                                    break;
                                case "rain":
                                    <g>
                                        <path d="M20,40 A20,20 0,0,1 80,40 A20,20 0,0,1 20,40" fill="lightblue" />
                                        <path d="M30,60 L40,80 M50,60 L60,80 M70,60 L80,80" stroke="blue" stroke-width="3" />
                                    </g>
                                    break;
                                case "lightning":
                                    <polygon points="60,10 30,50 50,50 40,90 70,50 50,50" fill="yellow" />
                                    break;
                                case "leaf":
                                    <path d="M50,10 Q90,50 50,90 Q10,50 50,10" fill="lightgreen" />
                                    break;
                                case "tree":
                                    <g>
                                        <polygon points="50,10 80,50 20,50" fill="green" />
                                        <rect x="40" y="50" width="20" height="30" fill="brown" />
                                    </g>
                                    break;
                                case "flower":
                                    <g>
                                        <circle cx="50" cy="50" r="15" fill="yellow" />
                                        <circle cx="50" cy="20" r="15" fill="pink" />
                                        <circle cx="80" cy="50" r="15" fill="pink" />
                                        <circle cx="50" cy="80" r="15" fill="pink" />
                                        <circle cx="20" cy="50" r="15" fill="pink" />
                                    </g>
                                    break;
                                case "branch":
                                    <path d="M20,80 Q50,20 80,80 M35,50 L65,50" stroke="brown" stroke-width="8" fill="none" />
                                    break;
                            }
                        </svg>
                    }
                </div>
            }
        </div>
        <div class="player-list">
            <h3>Players</h3>
            <ul>
                @foreach (var player in players)
                {
                    <li>@player.Nickname (@player.MatchedPairsCount/@(totalPairs))</li>
                }
            </ul>
        </div>
    </div>
}

<GameWonModal IsVisible="isGameWon" WinnerName="winnerName" StartNewGame="StartNewGame" />

@code {
    [Parameter]
    public string ChannelName { get; set; }

    private bool gameStarted = false;
    private List<Card> cards = new List<Card>();
    private List<string> flippedCards = new List<string>();
    private bool isGameWon = false;
    private string winnerName = "";
    private string nickname = "";
    private string roomname = "";
    private string deviceId;
    private int totalPairs;
    private List<Player> players = new List<Player>();
    private Timer updateTimer;
    private const int UPDATE_INTERVAL = 1000;
    private bool firstRender = true;


    private int horizontalCardCount = 5;  // Kolon sayısı
    private int verticalCardCount = 4;    // Satır sayısı

    protected override async Task OnInitializedAsync()
    {
        roomname = ChannelName;
        updateTimer = new Timer(UpdatePlayerList, null, 0, UPDATE_INTERVAL);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            deviceId = await LocalStorageService.GetItemAsync<string>("DeviceId");
            if (string.IsNullOrEmpty(deviceId))
            {
                deviceId = Guid.NewGuid().ToString();
                await LocalStorageService.SetItemAsync("DeviceId", deviceId);
            }

            nickname = await LocalStorageService.GetItemAsync<string>("Nickname") ?? "";

            StateHasChanged();
        }
    }

    private async void UpdatePlayerList(object state)
    {
        players = PlayerService.GetPlayers(roomname);
        await InvokeAsync(StateHasChanged);
    }

    private async Task StartGame()
    {
        if (string.IsNullOrEmpty(nickname))
        {
            return;
        }

        try
        {
            await LocalStorageService.SetItemAsync("Nickname", nickname);

            gameStarted = true;
            cards = GenerateCards();
            totalPairs = cards.Count / 2;
            PlayerService.AddPlayer(roomname, nickname, deviceId);
            isGameWon = false;
            winnerName = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in StartGame: {ex.Message}");
        }
    }

    private async Task FlipCard(string cardId)
    {
        if (flippedCards.Count == 2)
        {
            return;
        }

        var card = cards.First(c => c.Id == cardId);
        if (card.Flipped) return;

        card.Flipped = true;
        flippedCards.Add(cardId);

        if (flippedCards.Count == 2)
        {
            var firstCard = cards.First(c => c.Id == flippedCards[0]);
            var secondCard = cards.First(c => c.Id == flippedCards[1]);

            if (firstCard.Shape != secondCard.Shape)
            {
                await Task.Delay(1000);
                firstCard.Flipped = false;
                secondCard.Flipped = false;
                flippedCards.Clear();
            }
            else
            {
                int matchedPairs = cards.Count(c => c.Flipped) / 2;
                PlayerService.UpdatePlayerMatchedPairs(roomname, nickname, deviceId, matchedPairs);
                flippedCards.Clear();

                if (cards.All(c => c.Flipped))
                {
                    isGameWon = true;
                    winnerName = nickname;
                }
            }
            StateHasChanged();
        }
    }

    private List<Card> GenerateCards()
    {
        // Toplam kart sayısını hesapla
        int totalCards = horizontalCardCount * verticalCardCount;

        // Çift sayıda kart olduğundan emin ol
        if (totalCards % 2 != 0)
            totalCards--;

        var shapes = new[] {
            "circle", "square", "triangle", "star",
            "heart", "diamond", "cross", "moon",
            "pentagon", "hexagon", "octagon", "club",
            "spade", "trapezoid", "parallelogram", "rhombus",
            "arrow-up", "arrow-down", "arrow-left", "arrow-right",
            "plus", "minus", "multiply", "divide",
            "sun", "cloud", "rain", "lightning",
            "leaf", "tree", "flower", "branch"
        };

        var cardPairs = new List<Card>();
        int pairsNeeded = totalCards / 2;

        // Her şekilden iki adet ekle
        for (int i = 0; i < pairsNeeded; i++)
        {
            var shape = shapes[i % shapes.Length];
            cardPairs.Add(new Card { Id = Guid.NewGuid().ToString(), Shape = shape });
            cardPairs.Add(new Card { Id = Guid.NewGuid().ToString(), Shape = shape });
        }

        // Kartları karıştır
        return cardPairs.OrderBy(a => Guid.NewGuid()).ToList();
    }

    private void StartNewGame()
    {
        StartGame();
    }

    public void Dispose()
    {
        updateTimer?.Dispose();
    }

    public class Card
    {
        public string Id { get; set; }
        public string Shape { get; set; }
        public bool Flipped { get; set; }
    }
}